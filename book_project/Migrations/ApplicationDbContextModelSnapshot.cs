// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using book_project.Data;

#nullable disable

namespace book_project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("book_project.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "Philip K. Dick"
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "Douglas Adams"
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "J.R.R. Tolkien"
                        });
                });

            modelBuilder.Entity("book_project.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            Genre = "Science Fiction",
                            Title = "Do Androids Dream of Electric Sheep"
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 1,
                            Genre = "Alternative History",
                            Title = "The Man In The High Castle"
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 2,
                            Genre = "Science Fiction",
                            Title = "Hitchhiker's Guide To The Galaxy"
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 3,
                            Genre = "Fantasy",
                            Title = "The Hobbit"
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 3,
                            Genre = "Fantasy",
                            Title = "The Lord of the Rings"
                        },
                        new
                        {
                            BookId = 6,
                            AuthorId = 3,
                            Genre = "Fantasy",
                            Title = "Silmarillion"
                        });
                });

            modelBuilder.Entity("book_project.Models.Favourite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId1");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("book_project.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId1")
                        .HasColumnType("TEXT");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId1");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Analysis = "My favorite book of all time, a remarkable thought-provoking ending",
                            BookId = 1,
                            Rating = 5,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("book_project.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "8cc03974-59cf-4946-8447-8b7525c387c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d21cf558-7819-445e-978d-30a4ca063dd5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "1234qwer",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a52283f-6328-4751-b89f-848da3b81cc6",
                            Token = "1234qwer",
                            TwoFactorEnabled = false,
                            UserId = 1,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("book_project.Models.Book", b =>
                {
                    b.HasOne("book_project.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("book_project.Models.Favourite", b =>
                {
                    b.HasOne("book_project.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_project.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("book_project.Models.Review", b =>
                {
                    b.HasOne("book_project.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("book_project.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Book");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
